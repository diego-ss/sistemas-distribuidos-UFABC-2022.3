package application;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Random;
import java.util.Scanner;
import java.util.Set;


public class Client {
	
	// relação de portas dos servidores
	private Set<Integer> serversPorts = new HashSet<Integer>();
	
	private static Scanner keyboard;
	
	public Client() {

	}
	
	public void addServerPort(Integer port) {
		serversPorts.add(port);
		
		for(Integer i : serversPorts)
			System.out.println(i);
	}
	
	public void sendMessage(String key) {
		Thread th = new Thread(() -> {
			// pegando servidor aleatório
			Integer port = getRandomPort();
			
			try {
				// criando socket e streams de escrita/leitura
				Socket s = new Socket("127.0.0.1", port);
				OutputStream os = s.getOutputStream();
				DataOutputStream writer = new DataOutputStream(os);
				InputStreamReader is = new InputStreamReader(s.getInputStream());
				BufferedReader reader = new BufferedReader(is);
				
				// criando mensagem
				Message message = new Message();
				message.setAsPut("first_key", "teste_value");
				String msgJson = message.toJson();
				
				// enviando mensagem
				writer.writeBytes(msgJson);
				Message response = Message.fromJson(reader.readLine());
				
			} catch (UnknownHostException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		});
		
		th.start();
	}
	
	private Integer getRandomPort() {
		Random random = new Random();
		int randomIndex = random.nextInt(serversPorts.size());
		
		Iterator<Integer> iterator = serversPorts.iterator();
		  
        int currentIndex = 0;
        Integer randomElement = null;
  
        // iterate the HashSet
        while (iterator.hasNext()) {
  
            randomElement = iterator.next();
  
            // if current index is equal to random number
            if (currentIndex == randomIndex)
                return randomElement;
  
            // increase the current index
            currentIndex++;
        }
  
        return randomElement;
	}
	
	public static void main(String[] args) {
		keyboard = new Scanner(System.in);
		System.out.println("Informe as portas dos servidores: ");
		
		Client client = new Client();
		client.addServerPort(keyboard.nextInt());
		client.addServerPort(keyboard.nextInt());
		client.addServerPort(keyboard.nextInt());
		
		
}

}
